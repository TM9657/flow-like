//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "BitType")]
pub enum BitType {
    #[sea_orm(string_value = "Llm")]
    Llm,
    #[sea_orm(string_value = "Vlm")]
    Vlm,
    #[sea_orm(string_value = "Embedding")]
    Embedding,
    #[sea_orm(string_value = "ImageEmbedding")]
    ImageEmbedding,
    #[sea_orm(string_value = "File")]
    File,
    #[sea_orm(string_value = "Media")]
    Media,
    #[sea_orm(string_value = "Template")]
    Template,
    #[sea_orm(string_value = "Tokenizer")]
    Tokenizer,
    #[sea_orm(string_value = "TokenizerConfig")]
    TokenizerConfig,
    #[sea_orm(string_value = "SpecialTokensMap")]
    SpecialTokensMap,
    #[sea_orm(string_value = "Config")]
    Config,
    #[sea_orm(string_value = "PreprocessorConfig")]
    PreprocessorConfig,
    #[sea_orm(string_value = "Projection")]
    Projection,
    #[sea_orm(string_value = "Project")]
    Project,
    #[sea_orm(string_value = "Board")]
    Board,
    #[sea_orm(string_value = "Other")]
    Other,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "LLMProvider")]
pub enum LlmProvider {
    #[sea_orm(string_value = "HuggingFace")]
    HuggingFace,
    #[sea_orm(string_value = "OpenAI")]
    OpenAi,
    #[sea_orm(string_value = "Anthropic")]
    Anthropic,
    #[sea_orm(string_value = "AzureOpenAI")]
    AzureOpenAi,
    #[sea_orm(string_value = "Google")]
    Google,
    #[sea_orm(string_value = "IBM")]
    Ibm,
    #[sea_orm(string_value = "X")]
    X,
    #[sea_orm(string_value = "Bedrock")]
    Bedrock,
    #[sea_orm(string_value = "Deepseek")]
    Deepseek,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ProjectStatus")]
pub enum ProjectStatus {
    #[sea_orm(string_value = "ACTIVE")]
    Active,
    #[sea_orm(string_value = "INACTIVE")]
    Inactive,
    #[sea_orm(string_value = "ARCHIVED")]
    Archived,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ProjectVisibility")]
pub enum ProjectVisibility {
    #[sea_orm(string_value = "PUBLIC")]
    Public,
    #[sea_orm(string_value = "PUBLIC_REQUEST_TO_JOIN")]
    PublicRequestToJoin,
    #[sea_orm(string_value = "PRIVATE")]
    Private,
    #[sea_orm(string_value = "PROTOTYPE")]
    Prototype,
}
