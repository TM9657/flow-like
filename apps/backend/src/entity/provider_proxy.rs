//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use super::sea_orm_active_enums::LlmProvider;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ProviderProxy")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    pub provider: LlmProvider,
    #[sea_orm(column_name = "modelId", column_type = "Text", unique)]
    pub model_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub version: Option<String>,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "bitId", column_type = "Text", unique)]
    pub bit_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub endpoint: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub token: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bit::Entity",
        from = "Column::BitId",
        to = "super::bit::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Bit,
    #[sea_orm(has_many = "super::provider_invocation::Entity")]
    ProviderInvocation,
}

impl Related<super::bit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bit.def()
    }
}

impl Related<super::provider_invocation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProviderInvocation.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
