//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use super::sea_orm_active_enums::ProjectVisibility;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "PublicationLog")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_name = "requestId", column_type = "Text")]
    pub request_id: String,
    #[sea_orm(column_name = "authorId", column_type = "Text", nullable)]
    pub author_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub message: Option<String>,
    pub visibility: Option<ProjectVisibility>,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::publication_request::Entity",
        from = "Column::RequestId",
        to = "super::publication_request::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PublicationRequest,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::AuthorId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User,
}

impl Related<super::publication_request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PublicationRequest.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
