name: 'Setup Environment'
description: 'Sets up the environment for building the project, including dependencies, caches, and tools.'
 
inputs:
  repo-token:
    description: 'GitHub token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Cleanup environment
      run: |
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y 'php.*'
        sudo apt-get remove -y '^mongodb-.*'
        sudo apt-get remove -y '^mysql-.*'
        sudo apt-get remove -y azure-cli firefox powershell mono-devel libgl1-mesa-dri
        sudo apt-get autoremove -y
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet/
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/.ghcup/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/lib/android
      shell: bash

    - name: Install and cache dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libgtk-3-dev libclang-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev pkg-config protobuf-compiler webkit2gtk-4.1
        version: 1.0

    - name: Cache Bun dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: ${{ runner.os }}-bun-

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-registry-

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-target-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        repo-token: ${{ inputs.repo-token }}

    - name: Install Bun
      run: npm install -g bun
      shell: bash

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

    - name: Install frontend dependencies
      run: bun install
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.repo-token }}

    - name: Check llamafile
      run: |
        if [ ! -f "./apps/desktop/src-tauri/bin/llamafiler" ]; then
          echo "::error::Llamafile not found! Ensure it is downloaded correctly."
          exit 1
        fi
      shell: bash